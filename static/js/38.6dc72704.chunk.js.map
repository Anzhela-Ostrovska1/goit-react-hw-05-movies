{"version":3,"file":"static/js/38.6dc72704.chunk.js","mappings":"gNAYA,IAGA,EAHgB,CACdA,KAbF,SAAcC,GACZ,OAAOC,MAAM,sCAADC,OAC4BF,EAAO,qEAC7CG,MAAK,SAAAC,GACL,OAAIA,EAAKC,GACAD,EAAKE,OAGPC,QAAQC,OAAO,IAAIC,MAAM,uBAClC,GACF,G,kBC6CA,EAlDa,WACX,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BX,EAAIa,EAAA,GAAEE,EAAOF,EAAA,GACZZ,GAAYe,EAAAA,EAAAA,MAAZf,QACRgB,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,IAEtBG,EAAAA,EAAAA,YAAU,WACHpB,GAELqB,EAAAA,KAAarB,GAEVG,MAAK,SAAAC,GACJU,EAAQV,EACV,IAECkB,OAAM,SAAAJ,GACLC,EAASD,EACX,GACJ,GAAG,CAAClB,IAKJ,OACEuB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGN,IAASO,EAAAA,EAAAA,KAAA,MAAAD,SAAKN,EAAMQ,UAEpB3B,GACCA,EAAKA,MACLA,EAAKA,KAAK4B,KAAI,SAAAC,GAAK,OACjBL,EAAAA,EAAAA,MAAA,OAAKM,UAAWC,EAAAA,EAAAA,cAAkBN,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OACEM,IACEH,EAAMI,aAAY,kCAAA9B,OACoB0B,EAAMI,cAbxD,gFAgBUC,MAAO,IACPC,IAAKN,EAAMO,QAEbV,EAAAA,EAAAA,KAAA,KAAAD,SAAII,EAAMO,QACVZ,EAAAA,EAAAA,MAAA,KAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAMI,UAAWC,EAAAA,EAAAA,cAAkBN,SAAC,eAAkB,IACrDI,EAAMQ,eAb6BR,EAAMS,GAexC,MAIhB,C","sources":["services/Api-Cast.js","components/Cast.js"],"sourcesContent":["function cast(movieId) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US&api_key=f71c5261a9fba20ceeb62f41ed4cce9c`\n  ).then(resp => {\n    if (resp.ok) {\n      return resp.json();\n    }\n\n    return Promise.reject(new Error('There are no movies'));\n  });\n}\n\nconst apiCast = {\n  cast,\n};\nexport default apiCast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ApiCast from '../services/Api-Cast';\nimport css from '../components/MoviesGallery.module.css';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    ApiCast.cast(movieId)\n\n      .then(resp => {\n        setCast(resp);\n      })\n\n      .catch(error => {\n        setError(error);\n      });\n  }, [movieId]);\n\n  const defaultImg =\n    '<https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700>';\n\n  return (\n    <div>\n      {error && <h1>{error.message}</h1>}\n\n      {cast &&\n        cast.cast &&\n        cast.cast.map(actor => (\n          <div className={css.CastContainer} key={actor.id}>\n            <img\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                  : defaultImg\n              }\n              width={150}\n              alt={actor.name}\n            />\n            <p>{actor.name}</p>\n            <p>\n              <span className={css.CastCharacter}>Character:</span>{' '}\n              {actor.character}\n            </p>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["cast","movieId","fetch","concat","then","resp","ok","json","Promise","reject","Error","_useState","useState","_useState2","_slicedToArray","setCast","useParams","_useState3","_useState4","error","setError","useEffect","ApiCast","catch","_jsxs","children","_jsx","message","map","actor","className","css","src","profile_path","width","alt","name","character","id"],"sourceRoot":""}